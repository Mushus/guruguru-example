# 設定ファイルの仕様バージョン
# 今は 2 が最新のバージョン
version: 2
jobs:
  # ジョブの定義
  # buildというjobを一つ定義している
  # 複数定義しておいて使い分けることができる？
  build:
    # タスクを実行する環境。
    # Nodeがビルドしたいかもしれないので node のコンテナを選んでいる。
    # コンテナ = 仮想環境みたいなもの。
    # ↓にどんなDockerコンテナがあるか書いてある
    # https://circleci.com/docs/2.0/circleci-images/
    # node最新 / OS Debian Stretch / ブラウザなし
    docker:
      - image: circleci/node:stretch
    # 環境変数
    environment:
      # 特に意味はなさそうだが、サンプルとしてタイムゾーンを設定している
      TZ: /usr/share/zoneinfo/Asia/Tokyo
    # タスクが実行される場所。リポジトリの内容がここに配置されてタスクが実行される。
    working_directory: /home/circleci/ws
    # タスクの細かい手順。
    # 上から順に実行されていく。
    # 今回は以下の手順を行う。
    # 1. gitリポジトリから取ってきて
    # 2. キャッシュを取得する(二回目以降早くなる)
    # 3. 依存解決(必要なライブラリを集める)
    # 4. キャッシュする
    # 5. テストする
    # 6. ビルドする
    # 7. デプロイする(Webサイトを更新する)
    steps:
      # リポジトリから取得して配置する
      - checkout
      # 高速化のためにキャッシュしてもらう
      - restore_cache:
          keys: v1-dependencies
          # 今回はやってないが、package.json の値のファイルの内容でキーを作ることで、
          # package.json が更新されたときにキャッシュにヒットしなくなる
          # キャッシュずっと使いたい場合は以下のようにしておくと良いと思う。
          # - keys: v1-dependencies-{{ checksum "package.json" }}

      # 依存解決する(使ってるライブラリを集める)
      # `run` は好きなコマンドが実行できる
      - run:
          name: 依存解決
          command: |
            # ftp コマンドでアップロードは辛いので、ミラーリングアップロードできる lftp を導入する
            sudo apt-get install lftp
            # yarn

      # キャッシュを保存する
      - save_cache:
          # キャッシュするパス
          paths:
            # node_module に色々ツールが入るのでそこをキャッシュする
            - node_modules
          # キー名は restore_cache と揃っていればなんでもいい。
          key: v1-dependencies

      - run:
          name: テスト
          command: |
            echo "test"
            # yarn test

      - run:
          name: ビルド
          command: |
            echo "build"
            # yarn で依存解決してビルドする場合こんな感じ？
            # yarn build

      - run:
          name: デプロイ
          command: |
            lftp -u $FTP_USER,$FTP_PASSWORD $FTP_HOST -e "mirror --reverse --delete --only-newer --verbose -X .DS_Store ./dist /; exit"
            cat /var/log/secure
